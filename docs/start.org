#+TITLE:    Start
#+AUTHOR:   Sina Samavati
#+EMAIL:    sina.samv@gmail.com
#+OPTIONS:  ^:nil num:nil

* Start
   :PROPERTIES:
   :CUSTOM_ID: start
   :END:

** Types
   :PROPERTIES:
   :CUSTOM_ID: types
   :END:

   #+BEGIN_SRC erlang
   Listener          = http | https | spdy
   AppName           = atom()
   HandlersOrAppName = Handlers | AppName

   HostMatch = term()
   StaticDir = file:name() | {priv_dir, App :: atom(), Dir :: file:name()}

   Option = {nb_acceptors, non_neg_integer()}
          | {ip, inet:ip_address()}
          | {port, inet:port_number()}
          | {cacertfile, file:name_all()}
          | {certfile, file:name_all()}
          | {keyfile, file:name_all()}
          | {static_dir, {HostMatch, StaticDir}}
          | {log_handlers, [{module(), any()}]}
   Options = [Option]
   #+END_SRC

** leptus functions
   :PROPERTIES:
   :CUSTOM_ID: leptus-functions
   :END:

*** start_listener/2
    :PROPERTIES:
    :CUSTOM_ID: start_listener-2
    :END:

    Starts leptus' dependencies and a listener of type ~Listener~.

    #+BEGIN_SRC erlang
    leptus:start_listener(Listener, HandlersOrAppName) -> {ok, pid()}
    #+END_SRC

    Note that if you use ~AppName~, Leptus will try to read
    ~AppName/priv/leptus.config~ file
    which should contain
    #+BEGIN_SRC erlang
    {handlers, Handlers}.
    {options, Options}.
    #+END_SRC

*** start_listener/3
    :PROPERTIES:
    :CUSTOM_ID: start_listener-3
    :END:

    Starts leptus' dependencies and a listener of type ~Listener~.

    #+BEGIN_SRC erlang
    leptus:start_listener(Listener, Handlers, Options) -> {ok, pid()}
    #+END_SRC

** The OTP way

   The recommended method for starting an OTP application:
   #+BEGIN_SRC erlang
   application:start(crypto),
   application:start(ranch),
   application:start(cowboy),
   application:start(leptus).
   #+END_SRC
   After that ~start_listener~ function should be called to start a listener.
