#+TITLE:    leptus_req module
#+AUTHOR:   Sina Samavati
#+EMAIL:    sina.samv@gmail.com
#+OPTIONS:  ^:nil num:nil

* leptus_req module
  :PROPERTIES:
  :CUSTOM_ID: leptus_req
  :END:

  Please keep it in mind that ~Req~ is a Pid that should be used as the first
  argument in leptus_req functions.

  All the functions given below are accessible through the ~leptus_req~ module,
  which are supposed to work with the ~Req~ object.

** Types
   :PROPERTIES:
   :CUSTOM_ID: types
   :END:

   #+BEGIN_SRC erlang
   Req = pid()
   #+END_SRC

** Functions
   :PROPERTIES:
   :CUSTOM_ID: functions
   :END:

*** param/2
    :PROPERTIES:
    :CUSTOM_ID: param-2
    :END:

    Returns a parameter that is bound to the route.

    #+BEGIN_SRC erlang
    param(Req, Name :: atom()) -> binary() | undefined

    %% e.g.
    %% route: /items/:id
    %% requested uri: /items/1863
    param(Req, id) -> <<"1863">>
    #+END_SRC

*** params/1
    :PROPERTIES:
    :CUSTOM_ID: params-1
    :END:

    Returns parameters that are bound to the route.

    #+BEGIN_SRC erlang
    params(Req) -> [{atom(), binary()}]

    %% e.g.
    params(Req) -> [{id, <<"1863">>}]
    #+END_SRC

*** qs/1
    :PROPERTIES:
    :CUSTOM_ID: qs-1
    :END:

    Returns query strings.

    #+BEGIN_SRC erlang
    qs(Req) -> binary()

    %% e.g.
    %% uri: /items/?limit=50
    qs(Req) -> <<"limit=50">>
    #+END_SRC

*** qs_val/2
    :PROPERTIES:
    :CUSTOM_ID: qs_val-2
    :END:

    Returns the given query string value.

    #+BEGIN_SRC erlang
    qs_val(Req, Field :: binary()) -> binary() | undefined

    %% e.g.
    qs_val(Req, <<"limit">>) -> <<"50">>
    #+END_SRC

*** uri/1
    :PROPERTIES:
    :CUSTOM_ID: uri-1
    :END:

    Returns the requested URI.

    #+BEGIN_SRC erlang
    uri(Req) -> binary()

    %% e.g.
    uri(Req) -> <<"/items/?limit=50">>
    #+END_SRC

*** version/1
    :PROPERTIES:
    :CUSTOM_ID: version-1
    :END:

    Returns HTTP version.

    #+BEGIN_SRC erlang
    version(Req) -> 'HTTP/1.1' | 'HTTP/1.0'

    %% e.g.
    version(Req) -> 'HTTP/1.1'
    #+END_SRC

*** method/1
    :PROPERTIES:
    :CUSTOM_ID: method-1
    :END:

    Returns used HTTP method.

    #+BEGIN_SRC erlang
    method(Req) -> binary()

    %% e.g.
    method(Req) -> <<"DELETE">>
    #+END_SRC

*** body/1
    :PROPERTIES:
    :CUSTOM_ID: body-1
    :END:

    Returns received body (decoding might apply to it).

    #+BEGIN_SRC erlang
    body(Req) -> binary() | json_term()

    %% e.g.
    body(Req) -> <<"foo=bar">>

    %% when content-type is set to applicaation/json or application/x-msgpack
    body(Req) -> [{<<"function">>, <<"body/1">>}]
    #+END_SRC

*** body_raw/1
    :PROPERTIES:
    :CUSTOM_ID: body_raw-1
    :END:

    Returns raw body.

    #+BEGIN_SRC erlang
    body_raw(Req) -> binary()

    %% e.g.
    body_raw(Req) -> <<"{\"function\": \"body/1\"}">>
    #+END_SRC

*** body_qs/1
    :PROPERTIES:
    :CUSTOM_ID: body_qs-1
    :END:

    Returns body but in query string format.

    #+BEGIN_SRC erlang
    body_qs(Req) -> [{binary(), binary() | true}]

    %% e.g.
    body_qs(Req) -> [{<<"foo">>, <<"bar">>}]
    #+END_SRC

*** header/2
    :PROPERTIES:
    :CUSTOM_ID: header-2
    :END:

    Returns the given header value.

    #+BEGIN_SRC erlang
    header(Req, binary()) -> binary() | undefined

    %% e.g.
    header(Req, <<"content-type">>) -> <<"application/x-www-form-urlencoded">>
    #+END_SRC

*** header/3
    :PROPERTIES:
    :CUSTOM_ID: header-3
    :END:

    Returns the given header value or the default value if the header does not
    exist.

    #+BEGIN_SRC erlang
    header(Req, binary(), Default) -> binary() | Default

    %% e.g.
    header(Req, <<"content-type">>, undefined) -> undefined
    #+END_SRC

*** parse_header/2
    :PROPERTIES:
    :CUSTOM_ID: parse_header-2
    :END:

    Parses the given header.

    #+BEGIN_SRC erlang
    parse_header(Req, binary()) -> any() | undefined | {error, any()}

    %% e.g.
    parse_header(Req, <<"content-type">>) -> {<<"application">>, <<"json">>, []}
    #+END_SRC

*** auth/2
    :PROPERTIES:
    :CUSTOM_ID: auth-2
    :END:

    Checks for the given authorization method.

    NOTE: basic authentication is only supported at the moment.

    #+BEGIN_SRC erlang
    auth(Req, basic) -> {binary(), binary()} | <<>> | error

    %% e.g.
    auth(Req, basic) -> {<<"username">>, <<"p4ssw0rd">>}
    #+END_SRC

*** peer/1
    :PROPERTIES:
    :CUSTOM_ID: peer-1
    :END:

    Returns the IP address and the port number of the remote host.

    #+BEGIN_SRC erlang
    peer(Req) -> {inet:ip_address(), inet:port_number()}

    %% e.g.
    peer(Req) -> {{127, 0, 0, 1}, 3846}
    #+END_SRC

*** get_req/1
    :PROPERTIES:
    :CUSTOM_ID: get_req-1
    :END:

    Returns the Cowboy Req object.

    #+BEGIN_SRC erlang
    get_req(Req) -> cowboy_req:req()
    #+END_SRC

*** set_req/2
    :PROPERTIES:
    :CUSTOM_ID: set_req-2
    :END:

    Sets a new Cowboy Req object as the state of leptus_req so that leptus_req
    functions will use the new Req object.

    #+BEGIN_SRC erlang
    set_req(Req, CowboyReq) -> ok
    #+END_SRC
